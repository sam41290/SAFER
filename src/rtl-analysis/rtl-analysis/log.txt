-----------------------
   LibAnalysis v9.1
    May 30, 2022
-----------------------
[FIXED] restore register preservation analysis functionality
[ADDED] support parallelization
[UPDATED] AbsState:
          (+) support cstr and non-cstr mode for each abstract domain
[UPDATED] BaseLH, InitDomain, FlagDomain, CstrDomain:
          (+) use template for CompareArgsVal


-----------------------
   LibAnalysis v9.0
    April 25, 2022
-----------------------
[ADDED] FlagDomain, CstrDomain:
        (+) support two types of constraints:
            (+) id-based:    {rax != stack[34]}, {rax < 12}
            (+) value-based: {base_ax < base_stack[34]}, {base_ax < [12,15]}
        (+) support both comparable domains (e.g., BaseLH) and incomparable
            domains (e.g., InitDomain)
[ADDED] AbsState:
        (+) AbsStateCstr: for domains that support constraint, e.g., BaseLH
        (+) AbsState: for domains not support constraint, e.g., InitDomain
        (+) improve debug logs
[ADDED] External:
        (+) support new fine-grained jump table structs
[UPDATED] BaseDomain, BaseLH, InitDomain:
          (+) improve code quality with static methods, sharing TOP/BOT values
              between all domains
          (+) simplify code with Range struct for BaseLH
          (+) support more arithmetic operators for BaseLH
          (+) support better reasoning for InitDomain
[UPDATED] Framework:
          (+) support new lifter by converting att to intel syntax
[UPDATED] Program:
          (+) support conditional control flow
[UPDATED] Function:
          (+) revamp jump table analysis
          (+) support custom pattern matching
[UPDATED] RTL:
          (+) fix bugs related to preset execution
          (+) support evaluating a subexpr
          (+) support Nop class, distinguish failed-to-lift from Nop insn
[UPDATED] Expr:
          (+) fix bugs related to SubReg and IfElse
          (+) support converting Expr to UnitId, used in flag assignment
[UPDATED] Arithmetic:
          (+) support flag assignment
[UPDATED] Parser:
          (+) compatible with new lifter output
          (+) better tolerant against lifting error
          (+) support Nop instruction
[UPDATED] Common:
          (+) support Range struct
          (+) improve UnitId struct, represent negative id and bad id
          (+) support id-based constraints
[UPDATED] Config:
          (+) simplify by moving immutable macros to common.h


-----------------------
   LibAnalysis v8.6
     April 7 2022
-----------------------
[FIXED] BasicBlock:
        (+) address a bug that prevent values in loop from being set to TOP
            prior to its execution


-----------------------
  LibAnalysis v8.5.3
    March 25 2022
-----------------------
[FIXED] Uninitialized data analysis:
        (+) BP is not critical register
        (+) BP is removed from INIT set in ABI option


-----------------------
  LibAnalysis v8.5.2
    March 25 2022
-----------------------
[FIXED] Uninitialized data analysis:
        (+) clobber memory slots above data ptr passed to callee
        (+) improve performance


-----------------------
  LibAnalysis v8.5.1
    March 24 2022
-----------------------
[UPDATED] Uninitialized data analysis:
          (+) clobber memory slots above data ptr passed to callee


-----------------------
   LibAnalysis v8.5
    March 23 2022
-----------------------
[UPDATED] Register preservation
          (+) enable_fixpoint_analysis is OFF: preset every target to TOP
          (+) X is preserved if
              (+) eval(X) == TOP
              (+) eval(X) == NOTLOCAL and X != RSP
              (+) eval(X) == (baseX, l, h) and l <= 0 and h >= 0


-----------------------
   LibAnalysis v8.4.4
      March 23 2022
-----------------------
[FIXED] Uninitialized data analysis:
        (+) return address is located at BaseSP
        (+) AX is not an argument register
        (+) consider only SP and BP as INIT


-----------------------
   LibAnalysis v8.4.3
      March 16 2022
-----------------------
[FIXED] Uninitialized data analysis: weak update not turn INIT into UNINIT


-----------------------
   LibAnalysis v8.4.2
      March 1 2022
-----------------------
[FIXED] Function:
        (+) address bugs that consider TOP, BOT and NOTLOCAL as jump table base
[UPDATED] Program:
          (+) skip direct call targets because the analysis does not perform DFS


-----------------------
   LibAnalysis v8.4.1
    February 25 2022
-----------------------
[FIXED] Function:
        (+) address jump table missing where base is not %rip-based const


-----------------------
    LibAnalysis v8.4
    February 21 2022
-----------------------
[FIXED] AbsState:
        (+) bugs in load() related to undesired storing BOT that causes eternal
            loop, or return unsound result


-----------------------
    LibAnalysis v8.3
    February 20 2022
-----------------------
[FIXED] AbsState:
        (+) bugs in load() that cause loading to fail when BOT is stored
[FIXED] Uninitialized data analysis:
        (+) bugs where %rsp are both uninitialized and critical data
[FIXED] Const:
        (+) support for label_ref is restored (temporarily)
[ADDED] LibAnalysis:
        (+) support for custom definition of initialized data


-----------------------
    LibAnalysis v8.2
    February 9 2022
-----------------------
[ADDED] Uninitalized data analysis


-----------------------
    LibAnalysis v8.1
    January 26 2022
-----------------------
[FIXED] BaseLH:
        (+) bugs in norm() that causes l > r


-----------------------
    LibAnalysis v8.0
    January 25 2022
-----------------------
[UPDATED] SCC:
          (+) control flow graph within current SCC
          (+) list of basic blocks in reverse postorder
          (+) external edges: blocks in predecessor SCCs -> SCC's headers
          (+) execute(): support fixpoint iteration 
[UPDATED] Function:
          (+) construct SCCs reachable from a function entry
          (+) list of SCCs in reverse postorder (topological order)
          (+) forward_analysis(), track(): compatible with new AbsState design
          (+) jump_table_analysis(): bug fixes that lead to missing results
                                     rewritten for readability, maintenance
[UPDATED] AbsState:
          (+) structural channels:

               main     state of all blocks after complete execution of a block
                ^       partial state of passing blocks
                |       initial state (block "nullptr")
                |
                |
              block     state of one block during its execution
                ^       input from block channel (for current block)
                |                  main channel (for predecessor blocks)
                |       commit to main channel after complete execution
                |
               insn     state of one instruction during its execution
                        input from block channel (for current block)
                        commit to block channel after complete execution

          (+) refresh: value x at block b is refreshed through two steps
              (a) union value of x from predecessors of b in main channel
              (b) write to block b in block channel, before executing block b

          (+) state description:
              (a) reorganize types
              (b) using one clobber for all channel (lazy loading)

          (+) friendly interface:
              (a) value_unit(), value_range(), update_unit(), update_range(),
                  clobber(), refresh(), clear_cache():
                  --> remove CHANNEL, BasicBlock* and bool parameters
              (b) store_s(), store_w():
                  --> the target UnitId is implicit
                  --> unique method: store_w(), not write_w() + update_w()
                  --> robust against mishandling pointers
              (c) load():
                  --> the target UnitId is implicit
                  --> switch to block/main channel automatically
                  --> mark if value x at block b need refreshed next time
                  --> support fast clobber() with binary search
                  --> ready to support fixpoint iteration
              (d) ud_chain():
                  --> support use-def chain with binary search
[UPDATED] RTL:
          (+) execute():
              (a) remove CHANNEL parameter
              (b) parallel: supported by design (structural channels)
                  sequence: supported by commit after executing each statement,
                            except the last statement (will commit under Insn)
              (c) compatible with new AbsState interface
[UPDATED] Expr:
          (+) eval(): remove CHANNEL parameter


-----------------------
    LibAnalysis v7.0
    December 20 2021
-----------------------
[FIXED] Invalid register flow analysis: mark as invalid if
        (+) write invalid value to memory address TOP, NOTLOCAL, outside
            current stack frame
        (+) write value to an invalid memory address
        (+) memory dereference at an invalid memory address
[FIXED] Function:
        (+) ignore case where register definition is call/clobber in find_defs
[ADDED] AbsState:
        (+) support Clobber for a unit
[UPDATED] Program: take whole program as input:
          (+) indirect jump location -> vector of jump table targets
          (+) instruction location -> instruction size
          (+) set of function entry location
          (+) superset of all reachable instruction via fall through, direct
              transfers and indirect jump (only jump table)
          -----------------------------------------------------------------
          steps:
          (1) lift ASM to RTL
          (2) construct list of Insn
          (3) construct all BasicBlock reachable from all function entries,
              and add edges between BasicBlock
                  --> if a block was generated before, reuse.
                  --> otherwise, generate new block.
          (4) for each function, extract set of BasicBlock reachable from
              its entry


-----------------------
    LibAnalysis v6.4
    December 7 2021
-----------------------
[FIXED] flag or silently ignore input errors


-----------------------
    LibAnalysis v6.3
    December 2 2021
-----------------------
[UPDATED] LibAnalysis: invalid register flow analysis has been changed:
          The initial values of both callee-saved and caller-saved registers,
          except %rsp, %rip:
          (a) not part of unary, binary operator
          (b) not memory address to be dereferenced
          (c) the exact initial value stored within current stack frame


-----------------------
    LibAnalysis v6.2
    November 24 2021
-----------------------
[FIXED] LibAnalysis: address bugs related to configurations
[FIXED] AbsState
         (a) read(): address bugs related to incorrect recursion that leaves
                     many values to be BOT
         (b) invalid register flow analysis: filter out invalid initId
         (c) def(): address bugs related to condition for updates


-----------------------
    LibAnalysis v6.1
    November 21 2021
-----------------------
[ADDED] New interface to perform multiple analyses
         (a) Register preservation
         (b) Invalid register flow analysis
         (b) Jump table analysis
[ADDED] Support different settings for different analyses
[FIXED] Bugs in Assign::evaluate()
         --> def_ for stack/static are not updated
[UPDATED] AbsState:
         public:  update_range(), update_unit(), value_range(), value_unit()
         private: update_s(), update_w()


-----------------------
    LibAnalysis v6.0
     July 30 2021
-----------------------
[UPDATED] Support multiple domains
[UPDATED] Package into a shared library
[UPDATED] Great improvements on framework design


-----------------------
   LibAnalysis v5.7
     July 30 2021
-----------------------
[ADDED] Def-without-use feature for registers


-----------------------
   LibAnalysis v5.6.1
     July 30 2021
-----------------------
[FIXED] Bugs in Const::eval()
        --> lack of handling const_double
[FIXED] Bugs in AbsState::update_w()
        --> safe_delete(v) when stored in parallel state and not yet committed
[UPDATED] Ignore when the last basic block ends with a non-transfer intruction


-----------------------
   LibAnalysis v5.6
    July 28 2021
-----------------------
[FIXED] Segmentation fault when garbage_ points to an object in main/track
        state that is previously deleted in ~AbsState(). There are 2 solutions:
        (a) prioritize safe_delete() for garbage_ over clear_state()
        (b) clone v and safe_delete(v) in update_w
        Solution (b) is adopted to remove garbage_ out of AbsState members
[FIXED] Segmentation fault in ~JumpTable().
        "index" can be destroyed before or after delete framework, so for
        safety, "index" should be cloned
[UPDATED] Take entry point from program args instead of the first instruction
[UPDATED] Link basic blocks via jump table transfers
[UPDATED] All types of jump table must include stride
[UPDATED] AbsState supports get or update values in memory range
[UPDATED] Support exit instructions, e.g., hlt and ud2
[UPDATED] Interface::format_asm() handles variants of ret instructions


-----------------------
   LibAnalysis v5.5
      July 26 2021
-----------------------
[FIXED] Segmentation fault in write_s() when swapping a and b
[FIXED] Segmentation fault in read_i() when track state takes value from main
        state without committing
        e.g., (mult (reg ax) (const_int 1)) --> (reg ax)
              (ashift (reg bx) (const_int 0)) --> (reg bx)
[FIXED] Conversion::eval() is functional from now
[FIXED] Mem::eval() supports addresses under NOTLOCAL in lattice
[UPDATED] Jump table analysis now supports 3 types:
          (+) type 1: base1 + *(base2 + index * stride)
          (+) type 2: base1 + index
          (+) type 3: *(base1 + index)
[UPDATED] Jump table analysis can recognize the form with small deviation,
          e.g., (base1 + *(base2 + index * stride) << 0)


-----------------------
   LibAnalysis v5.4.3
      July 7 2021
-----------------------
[FIXED] A minor bug in read_i()
[ADDED] Debug level


-----------------------
   LibAnalysis v5.4.2
      July 7 2021
-----------------------
[ADDED] Vector modes
[ADDED] Preprocessing lifting input instead of using script!


-----------------------
   LibAnalysis v5.4.1
      July 7 2021
-----------------------
[FIXED] Recognize and ignore erroneous input


-----------------------
    LibAnalysis v5.4
      July 6 2021
-----------------------
[ADDED] Support jump table analysis
[ADDED] AbsState: Find all instructions that define a UnitId for a specific use


-----------------------
    LibAnalysis v5.3
      July 3 2021
-----------------------
[UPDATED] AbsState: The interface is improved
            (+) Data structure are more organized, e.g., separate main state
                from track state, and main/track/parallel state all use the
                same data structure
            (+) Similar methods are grouped
            (+) Remove redundant clean_unused() and TempUnit
            (+) All classes that interact with AbsState are also updated


-----------------------
    LibAnalysis v5.2
      July 1 2021
-----------------------
[FIXED] Fix all segmentation faults problem. Memory clean up is working!
[UPDATED] BaseDomain and BaseLH:
            (+) Support for NOTLOCAL
            (+) Use this->safe_delete() instead of delete(this)
            (+) Clear separation between handling TOP/BOT/NOTLOCAL and VAL
            (+) Reimplement some operators for maintenance purpose
            (+) All operators have been checked except lshift()
[UPDATED] AbsState:
            (+) Add safe_delete() in write_s()
            (+) Shorten write_w(), make write_w() and write_s() look similar
            (+) Capture least upperbound of out-of-bound memory contents
            (+) Add clobber() for assignment to memory range of TOP/NOTLOCAL
            (+) Initialize Static memory contents
[UPDATED] SuperBlock:
            (+) Sort execution order of basic blocks in a super block
            (+) Check if current super block is a loop
            (+) Remove redundant methods analyzed() and set_analyzed()
[UPDATED] Function:
            (+) Avoid double-free in clean_up() and destructor
            (+) Refine forward_analysis() and sort execution order of blocks
[UPDATED] Assign:
            (+) Support assignment to memory range of TOP/NOTLOCAL
[UPDATED] Call:
            (+) Strong update RAX to TOP after a Call
            (+) Normalize memory range, currently only operators normalize value


-----------------------
   LibAnalysis v5.1.1
     June 17 2021
-----------------------
[UPDATED] Move forward_analysis() out of Function's constructor
          Clean AbsState after processing each Function


-----------------------
   LibAnalysis v5.1
     June 17 2021
-----------------------
[ADDED] Expr and AbsState:
            (+) Support for checking the use-before-def property
[FIXED] AbsState:
            (+) The produced result is not sound in the presence of loop, but
                the purpose is to run simple analyses such as SP preservation
            (+) read() function:
                (-) if there exists an 'analyzed' predecessor, only visit those
                (-) otherwuse, visit all 'analyzing' predecessors if not visited


-----------------------
   LibAnalysis v5.0
     June 12 2021
-----------------------
[ADDED] SuperBlock:
            (+) analyzed: tell whether a super block has reached fixpoint state
                This supports new trace-back strategy below
[FIXED] Program:
            (+) Basic block construction
[FIXED] Function:
            (+) Super block identification
            (+) Super block graph construction
            (+) Ignore out of range control flow targets
[FIXED] BasicBlock:
            (+) Handle pred and succ for direct targets
[FIXED] AbsState:
            (+) Change trace-back strategy:
                  (-) Embed the super graph into AbsState
                  (-) "analyzed" state for each super graph
            (+) Handle out of range values
            (+) Deal with TOP and BOT values
[FIXED] BaseDomain/BaseLH:
            (+) Handle TOP and BOT
            (+) Reduce ref in a corner case in discard()
[FIXED] RTL/Expr:
            (+) Identify "Static" memory location
            (+) Define the behaviors with TOP and BOT operands
[UPDATED] In this version:
            (+) Enhanced with debugging logs
            (+) Each super block runs exactly one iteration for simplification
                implementation to handle condition
            (+) Update test program "sp_analysis" to reflect new interface
[UPDATED] AbsState:
            (+) Update detailed comments for AbsState core features
            (+) Improve performance by separating
                      value(): resolve a target and return reference, and
                  value_ref(): just return reference
            (+) Remove redundant methods, group common methods, reduce arguments


-----------------------
   LibAnalysis v4.5.1
      May 18 2021
-----------------------
[FIXED] Bugs in every class. Now the framework can be compiled.


-----------------------
    LibAnalysis v4.5
      May 17 2021
-----------------------
[UPDATED] AbsState: 
                  (+) support a new output channel for tracking purpose
                      track specific values after an instruction based on the
                      (precomputed) beginning state of a basic block
                  (+) group similar functions by parameterizing region
                      (register, stack, static, heap)
                  (+) remove unused objects, especially ones fed to update_w()
[UPDATED] Function:
                  (+) move forward_analysis() in BasicBlock and Insn to Function
                  (+) track(): track value of a list of targets after each in
                               a list of instructions
[UPDATED] TrackSP: update example to track stack pointer
[UPDATED] RTL and Expr subclasses: update to be compatible with AbsState


-----------------------
   LibAnalysis v4.4.1
      13 May 2021
-----------------------
[FIXED] A few bugs related to AbsState
[UPDATED] Example of stack preservation (tracksp.cpp)


-----------------------
    LibAnalysis v4.4
      7 May 2021
-----------------------
[ADDED] Expr classes: add clone() to support parser
[UPDATED] AbsState: implement destructor
[UPDATED] Parser: support Sequence


-----------------------
    LibAnalysis v4.3
     29 April 2021
-----------------------
[UPDATED] Use same data structure of AbsState for both registers and memory
          (+) An array, each element represents the states of an individual
              register/memory content across all basic blocks
                  using Unit = u_map<BasicBlock*,BaseDomain*>;
                  array<Unit,60> reg_;
                  array<Unit,100> stack_;
                  array<Unit,1000> static_;
          (+) This data structure by default does not support RTL Parallel which
              requires separate current state and output state. So an additional
              data structure that stores a separate output state is needed:
                  struct TempUnit {
                     char type;     // reg 1, stack 2, static 3, heap 4
                     int i;         // location id or register id
                     BasicBlock* b, // which block that this output refers to
                     BaseDomain* v; // value
                  };
                  vector<TempUnit> _cache;   // _cache stores all temporary
                                             // output including reg and mem.

          Let: N = number of possible targets for storing values
               B = number of basic blocks in a function
               I = number of instructions in a function
               M = number of edges between basic blocks (M <= 2B)
          (+) Space complexity:
               (-) Old approach: O(N*B)
               (-) New approach: O(N'*B) where N' << N
          (+) Time complexity:
               (-) Old approach: O(I*N + N*M)
               (-) New approach: O(I*N' + N'*M)
                   O(I*N') is the cost to read/write to the state, assuming
                           unordered_map is efficient O(1).
                   O(N'*M) is the cost to union a single target at the beginning
                           of each basic block. This is done by recursively
                           tracing and stored on demand. It's O(N'*B).
          (+) An implicit plus point is that the implementation is simplified
              due to the similarity between memory and registers. AbsStore is
              also removed, leaving the design much cleaner.
[UPDATED] RTL, Expr, Function, BasicBlock
          (+) Compatible with the new data structure.
          (+) bool BasicBlock::change records if BasicBlock's state is changed
[UPDATED] BaseLH: support signed and unsigned multiplications.


-----------------------
   LibAnalysis v4.2.1
     13 April 2021
-----------------------
[UPDATED] AbsState:
           + update_over(s, out):
                  out contains only update, the rest is nullptr
                  update a value in s with if that in out is not nullptr


-----------------------
    LibAnalysis v4.2
     13 April 2021
-----------------------
[UPDATED] AbsState:
          (a) Intermediate states are no different from regular state
          (b) Simplify update_s(), update_w() and abs_union() by using
              BaseDomain::discard(), BaseDomain::save() and BaseDomain::clone()
          (c) Add AbsState's destructor: improve design of AbsStore's destructor
[UPDATED] Expr/Arithemtic:
          (a) Update condition to clone values
          (b) Use BaseDomain::safe_delete()
[UPDATED] BaseDomain/BaseLH:
          (a) Arithmetic operators can return the operand, no need to clone
          (b) Provide important static methods:
               + save(): to be called when a value is stored to a state
               + discard(): to be called when a stored value is replaced
               + safe_delete(): avoid deleting stored values and TOP and BOT
          (c) Minor update for BaseLH::setup()


-----------------------
    LibAnalysis v4.1
     12 April 2021
-----------------------
[UPDATED] AbsState/AbsStore:
          (a) Provide methods for *intermediate state* such as update_s(),
              update_w(), abs_union() and update_from(). Note that:
                  values in intermediate state have negative ref count
                  values in main state have positive ref count
                  values with zero ref count can be:
                     + TOP or BOT
                     + intermediate values in arithmetic calculation
          (b) Support verification whether old state == new state. This is part
              of fixpoint analysis.
[UPDATED] BaseDomain:
          (a) Goal is to minimize domain-specific implementation in Function.
              As of now, only function state initialization needs to be
              domain-specific. Useful things: top(), bot(), equal() and clone()
          (b) Redesign object lifetime management: we want to avoid creating
              unnecessary copies as much as possible. When an object is not
              used, it is intentionally deleted instantly. This leads to the
              need of a ref count, with a few rules described above.
          (c) Common stuffs: symbolic (int) value such as memory region bases or
              initial values of register and memory are considered general, so
              these are placed as static methods in BaseDomain as well
[UPDATED] BaseLH:
          (a) All are completed except lshift() and handling length-mode
          (b) Handle TOP and BOT operands, delete "this" when necessary
          (c) Provide copy constructor and all comparison operators
          (d) Take care of special cases such as /1, *0, *1, *-1, ...
          (e) Support for negative symbol
[UPDATED] RTL/Expr:
          (a) Provide typecast operators from RTL to all subclasses
          (b) Provide execute() for Statement subclasses, support both Parallel
              and Sequence.
          (c) Implement E(*e,S) and E(r,S), and E(c,S) and E("pc",S)
          (d) Implement all Unary and Binary operators


-----------------------
    LibAnalysis v4.0
     26 March 2021
-----------------------
[ADDED] SuperBlock, Cache, Cache::State classes
[ADDED] eval() in Expr and execute() in Statement
[UPDATED] Complete redesign for Program, Function, BasicBlock, Insn classes
          (a) CFG of SuperBlock, each SuperBlock is associated to a topo index
          (b) Separate short-term objects from long-term objects
          (c) Switch to forward analysis
          (d) Remove unnecessary class variables and methods


-----------------------
    LibAnalysis v3.6
     19 March 2021
-----------------------
[FIXED] Bugs in Function::compute_topo_order()
[FIXED] Bugs in BasicBlock::process_transfers()
[UPDATED] Reorganize Interface, Program, Function, BasicBlock, Insn class
[UPDATED] Now the framework takes an entire program, not list of functions


-----------------------
    LibAnalysis v3.5.1
     03 March 2021
-----------------------
[FIXED] Remove pointless malloc in Interface constructor
[UPDATED] Update description of classes and methods including future vision


-----------------------
    LibAnalysis v3.5
     01 March 2021
-----------------------
[FIXED] Bugs in IfElse, Parser
[FIXED] Basic Block construction: (a) construct all Insns in a Function, then
                                  (b) construct all BasicBlocks in a Function
        In future updates: (a*) construct all Insns in a Program, then
                           (b*) construct all BasicBlocks in a Program, then
                           (c*) construct all Functions in a Program
[UPDATED] Shorten verbose method name, same rules for class member name
[UPDATED] Maximize const declaration, add some class method definition to header
[UPDATED] Use static inline const array of string in header
[UPDATED] Replace T::type_cast() by dynamic_cast<T*>


-----------------------
    LibAnalysis v3.4
    24 February 2021
-----------------------
[ADDED] Full implementation of jump table analysis
[ADDED] Support for use/def chaining features, optimize cache storage
[UPDATED] Simplify tracking design


-----------------------
    LibAnalysis v3.3
    19 February 2021
-----------------------
[FIXED] Resolve compiling and linking issue


-----------------------
    LibAnalysis v3.2
    19 February 2021
-----------------------
[ADDED] Support for initial states
[ADDED] Full descriptions for all methods in header files


-----------------------
   LibAnalysis v3.1.1
   15 February 2021
-----------------------
[FIXED] Minor issues


-----------------------
    LibAnalysis v3.1
    15 February 2021
-----------------------
[FIXED] Parser supports parallel
[FIXED] Resolve dependency
[UPDATED] Simplify framework by removing template for
          (a) Arch: support X86_64 only
          (b) Domain: switch to base_class/sub_class model


-----------------------
    LibAnalysis v3.0
    09 February 2021
-----------------------
[ADDED] Program class
[ADDED] Embedded, EmbeddedSelf, EmbeddedSetExpr classes
[ADDED] Full implementation of BaseLH
[FIXED] Logical, functional and syntax errors in tracking methods and other
        features in Function, BasicBlock, Insn and Expr subclasses


-----------------------
   LibAnalysis v2.0.2
    27 January 2021
-----------------------
[UPDATED] Analysis code example in framework documentation
[UPDATED] Rename header and source files, remove obsolete files
[UPDATED] Makefile


-----------------------
   LibAnalysis v2.0.1
    26 January 2021
-----------------------
[ADDED] Analysis code example in framework documentation


-----------------------
    LibAnalysis v2.0
    19 January 2021
-----------------------
[ADDED] Function::track_input_to(), BasicBlock::track_input_to(), Insn::track()
[ADDED] Full implementation of register cache
[UPDATED] Framework documentation
[UPDATED] Detailed comments about assumption, goal and implementation in source


-----------------------
    LibAnalysis v1.8
    15 January 2021
-----------------------
[ADDED] Uncategorized class
[FIXED] Violation of encapsulation
[FIXED] Handle nullptr in equal()
[FIXED] Const class constructor
[UPDATED] Interface of Interface, Function, BasicBlock, Insn classes
[UPDATED] equal() supports EQUAL_TYPE::PARTIAL for process_transfers()


-----------------------
    LibAnalysis v1.7
    06 August 2020
-----------------------
[ADDED] Framework documentation
[ADDED] Serialization for Mem/Reg as KeyType in MFUTable
[UPDATED] build_cfg()
[UPDATED] Parameterized Arch and AbstractDomain
[UPDATED] High-level design:
          (a) core framework independent from AbstractDomain
              :note: AbstractDomain provides constructor for every Expr class
          (b) remove eval() out of Expr
              :note: eval() does not happen within a single instruction but
                     across many instructions
          (c) split eval() to Function scope and Basic Block scope
              e.g., BasicBlock::eval() takes care of use/def within 1 single BB
                    Function::eval() takes care of use/def between BBs



-----------------------
   LibAnalysis v1.6.1
     28 July 2020
-----------------------
[FIXED] build_cfg()
[UPDATED] Refinements to support add-on analysis, let user defines their own
          abstract domain, and multi-arch support


-----------------------
    LibAnalysis v1.6
      25 May 2020
-----------------------
[ADDED] jump_table_analysis()


-----------------------
    LibAnalysis v1.5
      07 May 2020
-----------------------
[UPDATED] Full implementation of loop detection and topological order


-----------------------
    LibAnalysis v1.4
      05 May 2020
-----------------------
[ADDED] Compare, IfElse classes
[UPDATE] find() and equal() for RTL class


-----------------------
    LibAnalysis v1.3
      04 May 2020
-----------------------
[UPDATED] Function, Basic Block, Insn and RTL functionalities


-----------------------
    LibAnalysis v1.2
     29 April 2020
-----------------------
[UPDATED] AbstractDomain class now supports many BinaryOps and UnaryOps


-----------------------
    LibAnalysis v1.1
     27 April 2020
-----------------------
[ADDED] AbstractDomain class
[FIXED] Expr class


-----------------------
    LibAnalysis v1.0
     13 March 2020
-----------------------
Focus on object-oriented programming philosophy in framework design


