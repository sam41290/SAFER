I. Eliminate vs Not Eliminate pairs of same assembly instruction:
  - I will update about this soon, but briefly, the result changes just a little bit (around 0.1%).

II. 0% Success Rate when learning "x64.total.imap":
  - Command for training x64.test.imap:
         ./learnopt -tr ~/sbr2/lift/lift-code/test/x64/x64.test.imap -sa ~/test.autotr
  - Currently, our code works with each separate imap:
     (*) x64.openssl.imap:
         [MEASURE] RTL Matched: 57560
         [MEASURE] MNEMONIC_NOT_FOUND:0 (0.00%)
         [MEASURE] OPND_COMB_NOT_FOUND:0 (0.00%)
         [MEASURE] RTL Failed: 333 (0.58%)
         [MEASURE] Total Generalizations: 0 (0.%)
         [MEASURE] Total: 57893
         Success(%): 99.42
     (*) x64.binutils.imap:
         [MEASURE] RTL Matched: 77533
         [MEASURE] MNEMONIC_NOT_FOUND:0 (0.00%)
         [MEASURE] OPND_COMB_NOT_FOUND:0 (0.00%)
         [MEASURE] RTL Failed: 155 (0.20%)
         [MEASURE] Total Generalizations: 0 (0.%)
         [MEASURE] Total: 77688
         Success(%): 99.80
     (*) x64.glibc.imap:
         [MEASURE] RTL Matched: 91419
         [MEASURE] MNEMONIC_NOT_FOUND:0 (0.00%)
         [MEASURE] OPND_COMB_NOT_FOUND:0 (0.00%)
         [MEASURE] RTL Failed: 391 (0.43%)
         [MEASURE] Total Generalizations: 0 (0.%)
         [MEASURE] Total: 91810
         Success(%): 99.57
  - {x64.total.imap} = {x64.openssl.imap, x64.glibc.imap, x64.binutils.imap}
    {x64.test.imap} is extracted from {x64.total.imap} at "lift-code/test/x64/"
    {x64.test.imap} has 0% success; however, if:
       (1) remove any pair in the end (bottom) -> 98.95% success.
       (2) remove any pair of "call" or "jle" (middle) -> 98.86% or 98.95% success.
       (3) remove either the 1st or 2nd pair (top) -> still 0% success.
           BUT remove the 1st and 2nd together -> 98.95% success.
       (4) remove from the 3rd to 6th (top) -> 98.95% success.
           BUT remove from the 3rd to 5th -> 0% success.
       (5) remove the 6th, 7th, 8th and 10th (top) -> 98.95% success.
           BUT remove from the 6th to 8th -> 0% success.
  - Comment:
       (*) We can remove first and last instructions to get 98.5% success,
           Also, we see that our code works with individual imap files,
           So the problem shouldn't be about how our code learn those pairs.
       (*) I guess our code has problem with capability,
           Perhaps, our code works with individual imaps because of small size,
           But it's not simply about number of pairs, as example (4) and (5).
           I'm thinking about pairs which create new branch,
                                    or change an already existed branch.
       (*) I changed the capacity of hash in main.ml but it doesn't help.
           Can you please look at the x64.test.imap and your learn code?
           I already tried to reduce the imap size as best as I can,
                                            thought it's still not small.
